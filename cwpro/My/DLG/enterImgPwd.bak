#include "enterImgPwd.h"

#include "my_lcd.h"
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
#include "math.h"
#include <stddef.h>
#include "string.h"
#include "stdlib.h"
/*****************************************************************************************************/
/*EMWIN*/
#include "GUI.h"
#include "WM.h"
#include "DIALOG.h"

WM_HWIN hEdit_Pwd = 0;
WM_HWIN hText = 0;
WM_HWIN hButton_OK;
KEYPADStructTypeDef keypad_dev;
int status_pwd = 0;

typedef struct
{
    int          xPos;              /* 按钮X位置 */
    int          yPos;              /* 按钮Y位置 */
    int          xSize;             /* 按钮宽度 */
    int          ySize;             /* 按钮高度 */
    const char *acLabel;            /* 按钮所代表的字符 */
    void (* pfDraw)(WM_HWIN hWin);  /* 按钮的绘制函数 */
    const char *ButString;          /* 按钮上显示的字符 */
} BUTTON_DATA;

/* 在按钮上绘制位图，比如回车键，删除键等 */
static void _DrawCentered(WM_HWIN hWin, const GUI_BITMAP *pBM)
{
    int xSizeWin;
    int ySizeWin;
    int xSizeBMP;
    int ySizeBMP;
    int xPos;
    int yPos;

    xSizeWin = WM_GetWindowSizeX(hWin);
    ySizeWin = WM_GetWindowSizeY(hWin);
    xSizeBMP = pBM->XSize;
    ySizeBMP = pBM->YSize;
    xPos = (xSizeWin - xSizeBMP) >> 1;
    yPos = (ySizeWin - ySizeBMP) >> 1;
    GUI_DrawBitmap(pBM, xPos, yPos);
}

static void _DrawBkSpc (WM_HWIN hWin)
{
    _DrawCentered(hWin, &bmBackSpace); /* 绘制退格键(删除键) */
}
static void _DrawEnter (WM_HWIN hWin)
{
    _DrawCentered(hWin, &bmEnter);     /* 绘制回车键 */
}
static void _DrawShift (WM_HWIN hWin)
{
    _DrawCentered(hWin, &bmShift);    /* 绘制shift键 */
}
static void _DrawRetern(WM_HWIN hWin)
{
    _DrawCentered(hWin, &bmReturn);   /* 绘制返回键 */
}

/* 英文键盘位置 */
static  BUTTON_DATA _aEngButtonData[] =
{
    { (ENG_BUTTON_XPAC * 1 + ENG_BUTTON_WIDTH * 0 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "Q", 0, "Q" },
    { (ENG_BUTTON_XPAC * 2 + ENG_BUTTON_WIDTH * 1 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "W", 0, "W" },
    { (ENG_BUTTON_XPAC * 3 + ENG_BUTTON_WIDTH * 2 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "E", 0, "E" },
    { (ENG_BUTTON_XPAC * 4 + ENG_BUTTON_WIDTH * 3 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "R", 0, "R" },
    { (ENG_BUTTON_XPAC * 5 + ENG_BUTTON_WIDTH * 4 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "T", 0, "T" },
    { (ENG_BUTTON_XPAC * 6 + ENG_BUTTON_WIDTH * 5 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "Y", 0, "Y" },
    { (ENG_BUTTON_XPAC * 7 + ENG_BUTTON_WIDTH * 6 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "U", 0, "U" },
    { (ENG_BUTTON_XPAC * 8 + ENG_BUTTON_WIDTH * 7 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "I", 0, "I" },
    { (ENG_BUTTON_XPAC * 9 + ENG_BUTTON_WIDTH * 8 + ENG_BUTTONLINE1_XOFFSET),  ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "O", 0, "O" },
    { (ENG_BUTTON_XPAC * 10 + ENG_BUTTON_WIDTH * 9 + ENG_BUTTONLINE1_XOFFSET), ENG_BUTTON_LINE1YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "P", 0, "P" },

    { (ENG_BUTTON_XPAC * 1 + ENG_BUTTON_WIDTH * 0 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "A", 0, "A" },
    { (ENG_BUTTON_XPAC * 2 + ENG_BUTTON_WIDTH * 1 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "S", 0, "S" },
    { (ENG_BUTTON_XPAC * 3 + ENG_BUTTON_WIDTH * 2 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "D", 0, "D" },
    { (ENG_BUTTON_XPAC * 4 + ENG_BUTTON_WIDTH * 3 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "F", 0, "F" },
    { (ENG_BUTTON_XPAC * 5 + ENG_BUTTON_WIDTH * 4 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "G", 0, "G" },
    { (ENG_BUTTON_XPAC * 6 + ENG_BUTTON_WIDTH * 5 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "H", 0, "H" },
    { (ENG_BUTTON_XPAC * 7 + ENG_BUTTON_WIDTH * 6 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "J", 0, "J" },
    { (ENG_BUTTON_XPAC * 8 + ENG_BUTTON_WIDTH * 7 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "K", 0, "K" },
    { (ENG_BUTTON_XPAC * 9 + ENG_BUTTON_WIDTH * 8 + ENG_BUTTONLINE2_XOFFSET),  ENG_BUTTON_LINE2YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "L", 0, "L" },

    { (ENG_BUTTON_XPAC * 1 + ENG_BUTTON_WIDTH * 0 + ENG_BUTTONLINE3_XOFFSET),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONSHIFT_XINC, ENG_BUTTON_HEIGHT, "\x19", _DrawShift }, /* shift的键值为0X19   */
    { (ENG_BUTTON_XPAC * 2 + ENG_BUTTON_WIDTH * 1 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "Z", 0, "Z" },
    { (ENG_BUTTON_XPAC * 3 + ENG_BUTTON_WIDTH * 2 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "X", 0, "X" },
    { (ENG_BUTTON_XPAC * 4 + ENG_BUTTON_WIDTH * 3 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "C", 0, "C" },
    { (ENG_BUTTON_XPAC * 5 + ENG_BUTTON_WIDTH * 4 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "V", 0, "V" },
    { (ENG_BUTTON_XPAC * 6 + ENG_BUTTON_WIDTH * 5 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "B", 0, "B" },
    { (ENG_BUTTON_XPAC * 7 + ENG_BUTTON_WIDTH * 6 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "N", 0, "N" },
    { (ENG_BUTTON_XPAC * 8 + ENG_BUTTON_WIDTH * 7 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, "M", 0, "M" },
    { (ENG_BUTTON_XPAC * 9 + ENG_BUTTON_WIDTH * 8 + ENG_BUTTONLINE3_XOFFSET + ENG_BUTTONSHIFT_XINC),  ENG_BUTTON_LINE3YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONENTER_XINC, ENG_BUTTON_HEIGHT, "\x08", _DrawBkSpc},

    { (ENG_BUTTON_XPAC * 1 + ENG_BUTTON_WIDTH * 0 + ENG_BUTTONLINE4_XOFFSET),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONFIGURE_XINC, ENG_BUTTON_HEIGHT, "\x02", 0, "123"},                          /* 切换数组键盘 */
    { (ENG_BUTTON_XPAC * 2 + ENG_BUTTON_WIDTH * 1 + ENG_BUTTONLINE4_XOFFSET + ENG_BUTTONFIGURE_XINC),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONSYMBOL_XINC, ENG_BUTTON_HEIGHT,  "   ", 0, " ~ "}, /* 切换符号键盘 */
    { (ENG_BUTTON_XPAC * 3 + ENG_BUTTON_WIDTH * 2 + ENG_BUTTONLINE4_XOFFSET + ENG_BUTTONFIGURE_XINC + ENG_BUTTONSYMBOL_XINC),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT,  ",", 0, "," },
    { (ENG_BUTTON_XPAC * 4 + ENG_BUTTON_WIDTH * 3 + ENG_BUTTONLINE4_XOFFSET + ENG_BUTTONFIGURE_XINC + ENG_BUTTONSYMBOL_XINC),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONSPACE_XINC, ENG_BUTTON_HEIGHT,  " ", 0, "SPACE"},
    { (ENG_BUTTON_XPAC * 5 + ENG_BUTTON_WIDTH * 4 + ENG_BUTTONLINE4_XOFFSET + ENG_BUTTONFIGURE_XINC + ENG_BUTTONSYMBOL_XINC + ENG_BUTTONSPACE_XINC),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH, ENG_BUTTON_HEIGHT, ".", 0, "."},
   // { (ENG_BUTTON_XPAC * 6 + ENG_BUTTON_WIDTH * 5 + ENG_BUTTONLINE4_XOFFSET + ENG_BUTTONFIGURE_XINC + ENG_BUTTONSYMBOL_XINC + ENG_BUTTONSPACE_XINC),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONCE_XINC, ENG_BUTTON_HEIGHT, "\x0B", 0, "中"}, /* 切换到中文键盘  */
    { (ENG_BUTTON_XPAC * 6 + ENG_BUTTON_WIDTH * 5 + ENG_BUTTONLINE4_XOFFSET + ENG_BUTTONFIGURE_XINC + ENG_BUTTONSYMBOL_XINC + ENG_BUTTONSPACE_XINC ),  ENG_BUTTON_LINE4YPOS, ENG_BUTTON_WIDTH + ENG_BUTTONBACK_XINC, ENG_BUTTON_HEIGHT, "\x0d", _DrawEnter},
};
/**
 * @brief       设置BUTTON选择键盘的按键
 * @param       pDrawItemInfo：绘制项信息
 * @return      无
 */
static int _DrawSkinFlex_BUTTON(const WIDGET_ITEM_DRAW_INFO *pDrawItemInfo)
{
    static GUI_MEMDEV_Handle ahMemEdges[4];
    GUI_MEMDEV_Handle        hMem;
    WM_HWIN                  hWin;
    unsigned                 i;
    int                      xPos;
    int                      yPos;
    int                      xSize;
    int                      ySize;
    int                      x;
    int                      y;
    int                      Id;
    int                      IsPressed;
    int                      butheigh;
    void (* pfDraw)(WM_HWIN hWin);

    x = 0;
    y = 0;

    switch (pDrawItemInfo->Cmd)
    {
        case WIDGET_ITEM_CREATE:
            if (ahMemEdges[0] == 0)
            {
                /* 创建一个小的帮助窗口，但是不可见 */
                hWin = WM_CreateWindowAsChild(0, 0, 16, 16, WM_HBKWIN, WM_CF_SHOW | WM_CF_STAYONTOP, NULL, 0);
                WM_SelectWindow(hWin);

                /* 为button的每个边缘创建存储设备 */
                for (i = 0; i < GUI_COUNTOF(ahMemEdges); i++)
                {
                    switch (i)
                    {
                        case 0:
                            x = 0;
                            y = 0;
                            break;

                        case 1:
                            x = -16;
                            y = 0;
                            break;

                        case 2:
                            x = -16;
                            y = -16;
                            break;

                        case 3:
                            x = 0;
                            y = -16;
                            break;
                    }

                    /* 创建放大设备 */
                    hMem = GUI_MEMDEV_CreateFixed(0, 0, 16, 16, GUI_MEMDEV_NOTRANS, GUI_MEMDEV_APILIST_32, GUI_COLOR_CONV_8888);
                    GUI_MEMDEV_Select(hMem);
                    GUI_SetBkColor(GUI_TRANSPARENT);
                    GUI_Clear();
                    GUI_SetColor(COLOR_BORDER);
                    GUI_DrawRoundedFrame(x, y, x + 31, y + 31, 16, 4);	/* 绘制换肤后的按钮四角的圆弧 */

                    /* 收缩到指定的大小 */
                    ahMemEdges[i] = GUI_MEMDEV_CreateFixed(0, 0, 4, 4, GUI_MEMDEV_NOTRANS, GUI_MEMDEV_APILIST_32, GUI_COLOR_CONV_8888);
                    GUI_MEMDEV_Select(ahMemEdges[i]);
                    GUI_SetBkColor(GUI_TRANSPARENT);
                    GUI_Clear();
                    GUI_MEMDEV_RotateHQ(hMem, ahMemEdges[i], -6, -6, 0, 250);
                    GUI_MEMDEV_Delete(hMem);
                    GUI_MEMDEV_Select(0);
                }

                WM_DeleteWindow(hWin);
            }

            break;

        case WIDGET_ITEM_DRAW_TEXT:


            break;


        default:
            return BUTTON_DrawSkinFlex(pDrawItemInfo); /* 其他命令就使用默认的皮肤 */
    }

    return 0;
}

/**
 * @brief       绘制英文键盘
 * @param       hWin：句柄
 * @return      无
 */
void emwin_drawenglish_pad(WM_HWIN hWin)
{
    uint16_t i;

    /* 创建键盘按钮 */
    BUTTON_SetDefaultSkin(_DrawSkinFlex_BUTTON); /* 设置BUTTON的皮肤 */

    for (i = 0; i < GUI_COUNTOF(_aEngButtonData); i++)
    {
        /* 创建按钮 */
        keypad_dev.EngButton_Handle[i] = BUTTON_CreateEx(_aEngButtonData[i].xPos, _aEngButtonData[i].yPos, _aEngButtonData[i].xSize, _aEngButtonData[i].ySize,
                                         hWin, WM_CF_SHOW | WM_CF_HASTRANS, 0, ID_BUTTON + i);
        BUTTON_SetFont(keypad_dev.EngButton_Handle[i], GUI_FONT_8X16_ASCII);
        BUTTON_SetText(keypad_dev.EngButton_Handle[i], _aEngButtonData[i].ButString);
        BUTTON_SetFocussable(keypad_dev.EngButton_Handle[i], 0);
    }

  //  emwin_changecase(keypad_dev.LowerCase, _aEngButtonData);
}



 /**
 * @brief       keypad窗口调用的回调函数
 * @param       pMsg：消息结构体
 * @return      无
 */
static void _cbKeyPad(WM_MESSAGE *pMsg)
{
	    WM_HWIN    hWin;
    int        Id;
    int        NCode;
    int        xSize;
    int        ySize;
    uint16_t        slen;
    unsigned   i;

    hWin = pMsg->hWin;
    switch (pMsg->MsgId)
    {
			
        case WM_CREATE:            /* 此消息在窗口创建后立即发送，是窗口可以初始化并创建任何子窗口 */
					printf("9999999999999999  pMsg->MsgId=%d \r\n",pMsg->MsgId);
			//	emwin_drawnumber_pad(hWin);
           emwin_drawenglish_pad(hWin); /* 创建英文键盘 */
            break;
				
				        case WM_PAINT:
            /* 绘制背景 */
            xSize = WM_GetWindowSizeX(hWin);
            ySize = WM_GetWindowSizeY(hWin);
            GUI_SetColor(COLOR_BORDER);
            GUI_DrawRect(0, 0, xSize - 1, ySize - 1);
            GUI_DrawGradientV(1, 1, xSize - 2, ySize - 2, COLOR_KEYPAD0, COLOR_KEYPAD1);
            break;
				default:
	            break;
    }
	
}
 
static void _cbBk(WM_MESSAGE *pMsg)
{
	    WM_HWIN hItem;
    int     NCode;
    int     Id;
    WM_MESSAGE Msg;
	
    switch (pMsg->MsgId)
    {
        case WM_PAINT:
           GUI_DrawGradientV(0, 0, lcd_width, lcd_height, COLOR_BACK0, COLOR_BACK1);

            break;

			  default:
							break;
						
						
    }
}
static void _setPwd_cbBk(WM_MESSAGE *pMsg)
{
		    WM_HWIN hItem;
    int     NCode;
    int     Id;
    WM_MESSAGE Msg;
	
    switch (pMsg->MsgId)
    {
        case WM_PAINT:
     //       GUI_DrawGradientV(0, 0, lcd_width, lcd_height, COLOR_BACK0, COLOR_BACK1);

            break;
		      case WM_NOTIFY_PARENT:
					
		        if (pMsg->Data.v == WM_NOTIFICATION_RELEASED) /* 按钮被释放时 */
            {	
                if (pMsg->hWinSrc == hButton_OK)              /* hButton_OK被释放 */
                {
									if(status_pwd==0)
									{
										TEXT_SetText(hText, "Re-enter the PWD for confirm");
										BUTTON_SetText(hButton_OK, "OK");
										status_pwd = 1;
									}
									else if(status_pwd==1)
									{
										//比较两次输入，如果不相等
										{
												TEXT_SetText(hText, "PWD don't match,re-enter");
										    BUTTON_SetText(hButton_OK, "Next");
									    	status_pwd = 0;
										}
										
									}
									
                }	   
							
						}
						break;
			  default:
							break;
			}
}
void enter_ImgPwdPad(void) 
{
		WM_HWIN hFrame;

    WM_SetCallback(WM_HBKWIN, _cbBk);      /* 是指背景窗口回调函数 */
	
	    /* 创建FRAME窗口 */
    hFrame = FRAMEWIN_CreateEx(0, 0, 240, 160, WM_HBKWIN, WM_CF_SHOW, 0, 0, "Setting Password", _setPwd_cbBk);
    FRAMEWIN_SetTextColor(hFrame, GUI_RED);
    FRAMEWIN_SetFont(hFrame, &GUI_Font20_ASCII);
    FRAMEWIN_SetClientColor(hFrame, GUI_WHITE);
	    /* 创建edit(文本小工具)小工具 */
		 hEdit_Pwd = EDIT_CreateEx(32, 47, 154, 22, WM_GetClientWindow(hFrame), WM_CF_SHOW, GUI_ID_EDIT0, 100, 100);
     EDIT_EnableBlink(hEdit_Pwd, 500, 1); /* 开启光标,周期500ms */
		 EDIT_SetInsertMode(hEdit_Pwd, 1);     /* 开启插入模式 */
		 EDIT_SetFont(hEdit_Pwd, GUI_FONT_8X16_1);
		 WM_SetFocus(hEdit_Pwd);
	
	   hText = TEXT_CreateEx(5, 22, 189, 22, WM_GetClientWindow(hFrame),WM_CF_SHOW,GUI_ID_TEXT0,2,0);
	
	//Please check your password and try again
	
	   TEXT_SetText(hText, "Enter PWD For The Image");
     TEXT_SetFont(hText, GUI_FONT_13HB_ASCII);	
		 
		 hButton_OK = BUTTON_CreateEx(70, 80, 80, 40, WM_GetClientWindow(hFrame),WM_CF_SHOW,GUI_ID_BUTTON0,0);
	     BUTTON_SetFont(hButton_OK, GUI_FONT_16B_1);	 	 
		 BUTTON_SetText(hButton_OK, "Next");

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
		keypad_dev.xpos = 0;
    keypad_dev.ypos = (lcd_height * 5) / 10;
    keypad_dev.width = lcd_width;
    keypad_dev.height = lcd_height - ((lcd_height * 5) / 10);
	
		  printf("lcd_width=%d  lcd_height=%d   keypad_dev.width=%d  keypad_dev.height=%d\r\n",lcd_width, lcd_height ,  keypad_dev.width,  keypad_dev.height);
    keypad_dev.padtype = ENGLISH_KEYPAD;    /* 默认为英文键盘 */
    keypad_dev.signpad_flag = 0;
    keypad_dev.signpad_num = 2;
    keypad_dev.inputlen = 0;
    keypad_dev.pynowpage = 0;
    keypad_dev.cur_index = 0;
    keypad_dev.sta = 0;
	
    /* 设置keypad所使用的按钮的皮肤 */
   // BUTTON_SetDefaultSkin(_DrawSkinFlex_BUTTON); /* 设置BUTTON的皮肤 */
	 // FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 //   FRAMEWIN_SetDefaultTextAlign(GUI_TA_HCENTER);
	  keypad_dev.hKeypad = WM_CreateWindowAsChild(keypad_dev.xpos, keypad_dev.ypos, keypad_dev.width, keypad_dev.height, WM_HBKWIN, WM_CF_SHOW | WM_CF_STAYONTOP, _cbKeyPad, 0);

	
}